// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
//[[Rcpp::depends(RcppArmadillo)]]
#include <math.h>

using namespace Rcpp;

// Pred
arma::vec Pred(arma::vec X, int U, int predict_t, arma::vec phi, int p, arma::vec psi, int q, arma::vec tau, IntegerVector S, int r);
RcppExport SEXP _BSD_Pred(SEXP XSEXP, SEXP USEXP, SEXP predict_tSEXP, SEXP phiSEXP, SEXP pSEXP, SEXP psiSEXP, SEXP qSEXP, SEXP tauSEXP, SEXP SSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type U(USEXP);
    Rcpp::traits::input_parameter< int >::type predict_t(predict_tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(Pred(X, U, predict_t, phi, p, psi, q, tau, S, r));
    return rcpp_result_gen;
END_RCPP
}
// fit
double fit(arma::vec X, int U, arma::vec beta, int p, int q, IntegerVector S, int r);
RcppExport SEXP _BSD_fit(SEXP XSEXP, SEXP USEXP, SEXP betaSEXP, SEXP pSEXP, SEXP qSEXP, SEXP SSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type U(USEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(fit(X, U, beta, p, q, S, r));
    return rcpp_result_gen;
END_RCPP
}
// grad
arma::vec grad(arma::vec X, int U, arma::vec beta, int p, int q, IntegerVector S, int r);
RcppExport SEXP _BSD_grad(SEXP XSEXP, SEXP USEXP, SEXP betaSEXP, SEXP pSEXP, SEXP qSEXP, SEXP SSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type U(USEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(grad(X, U, beta, p, q, S, r));
    return rcpp_result_gen;
END_RCPP
}
// likeli
double likeli(arma::vec X, int U, arma::vec phi, int p, arma::vec psi, int q, arma::vec tau, IntegerVector S, int r, double sigma);
RcppExport SEXP _BSD_likeli(SEXP XSEXP, SEXP USEXP, SEXP phiSEXP, SEXP pSEXP, SEXP psiSEXP, SEXP qSEXP, SEXP tauSEXP, SEXP SSEXP, SEXP rSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type U(USEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(likeli(X, U, phi, p, psi, q, tau, S, r, sigma));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BSD_Pred", (DL_FUNC) &_BSD_Pred, 10},
    {"_BSD_fit", (DL_FUNC) &_BSD_fit, 7},
    {"_BSD_grad", (DL_FUNC) &_BSD_grad, 7},
    {"_BSD_likeli", (DL_FUNC) &_BSD_likeli, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_tsms(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
